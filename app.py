# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KbgPvpZdWuDMXwo1jpsfJpa67JmPJqmO
"""

!pip install streamlit pandas matplotlib seaborn

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load data
df = pd.read_csv("/content/synthetic_hr_data.csv", parse_dates=["Hire_Date", "Last_Review"])

st.title("üßë‚Äçüíº Synthetic HR Analytics Dashboard")
st.markdown("Future-proof your HR insights with GDPR-safe synthetic data.")

# Summary Stats
st.subheader("üìã Employee Overview")
col1, col2, col3 = st.columns(3)
col1.metric("Total Employees", len(df))
col2.metric("Average Age", int(df["Age"].mean()))
col3.metric("Average Salary (¬£)", f"{int(df['Salary'].mean()):,}")

# Gender Distribution
st.subheader("üë• Gender Distribution")
gender_counts = df["Gender"].value_counts()
st.bar_chart(gender_counts)

# Department Distribution
st.subheader("üè¢ Employees by Department")
dept_counts = df["Department"].value_counts()
st.bar_chart(dept_counts)

# Performance Analysis
st.subheader("üìà Performance vs. Sick Days")
fig, ax = plt.subplots()
sns.scatterplot(data=df, x="Sick_Days", y="Performance_Score", hue="Department", ax=ax)
st.pyplot(fig)

# Attrition Analysis
st.subheader("‚ùå Attrition Analysis")
left_by_dept = df[df["Left_Company"] == "Yes"]["Department"].value_counts()
st.bar_chart(left_by_dept)

# Salary vs Performance
st.subheader("üí∞ Salary vs Performance")
fig2, ax2 = plt.subplots()
sns.boxplot(data=df, x="Department", y="Salary", hue="Left_Company", ax=ax2)
plt.xticks(rotation=45)
st.pyplot(fig2)

# Show data
if st.checkbox("Show raw data"):
    st.write(df)

"""# Task
Tell me about this dataset.

Here is all the data you need:
"synthetic_hr_data.csv"

## Data loading

### Subtask:
Load the data from "synthetic_hr_data.csv" into a pandas DataFrame.

**Reasoning**:
Load the data from "synthetic_hr_data.csv" into a pandas DataFrame and display the first 5 rows.
"""

import pandas as pd

try:
    df = pd.read_csv('synthetic_hr_data.csv')
    display(df.head())
except FileNotFoundError:
    print("Error: 'synthetic_hr_data.csv' not found. Please ensure the file exists in the current directory.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

"""## Data exploration

### Subtask:
Explore the loaded data to understand its structure and key statistical properties.

**Reasoning**:
Explore the data by checking its shape, data types, descriptive statistics, unique values in categorical columns, and missing values.
"""

# Check the shape of the DataFrame
print("Shape of the DataFrame:", df.shape)

# Examine data types
print("\nData Types:\n", df.dtypes)

# Generate descriptive statistics for numerical features
print("\nDescriptive Statistics for Numerical Features:\n", df.describe())

# Explore categorical features
categorical_cols = ['Department', 'Gender', 'Left_Company']
for col in categorical_cols:
    print(f"\nUnique values and counts for {col}:\n{df[col].value_counts()}")
    print(f"Number of unique values in {col}: {df[col].nunique()}")

# Check for missing values
print("\nMissing Values per column:\n", df.isnull().sum())

"""## Data analysis

### Subtask:
Analyze the distribution of key variables and calculate descriptive statistics.

**Reasoning**:
Calculate the frequency and percentage of each category for categorical variables, calculate descriptive statistics for numerical variables, and investigate the relationship between 'Performance_Score' and other variables.
"""

# Analyze categorical variables
categorical_cols = ['Department', 'Gender', 'Left_Company']
for col in categorical_cols:
    print(f"\nFrequency and Percentage for {col}:\n{df[col].value_counts(normalize=True) * 100}")

# Cross-tabulation of 'Left_Company' and 'Department'
print("\nCross-tabulation of 'Left_Company' and 'Department':\n", pd.crosstab(df['Left_Company'], df['Department'], normalize='index') * 100)

# Analyze numerical variables
numerical_cols = ['Age', 'Salary', 'Performance_Score', 'Sick_Days']
print("\nDescriptive Statistics for Numerical Features:\n", df[numerical_cols].describe())

# Investigate the relationship between 'Performance_Score' and other variables
correlation_cols = ['Salary', 'Age', 'Sick_Days']
print("\nCorrelation between 'Performance_Score' and other variables:\n", df[['Performance_Score'] + correlation_cols].corr())

"""## Data visualization

### Subtask:
Visualize the data distributions and relationships between variables.

**Reasoning**:
Visualize the data distributions and relationships between variables using histograms, box plots, bar charts, a heatmap, and a bar chart showing the distribution of employees who left the company across different departments.
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Histograms for numerical features
plt.figure(figsize=(12, 8))
plt.subplot(2, 2, 1)
sns.histplot(df['Age'], kde=True)
plt.title('Distribution of Age')

plt.subplot(2, 2, 2)
sns.histplot(df['Salary'], kde=True)
plt.title('Distribution of Salary')

plt.subplot(2, 2, 3)
sns.histplot(df['Performance_Score'], kde=True)
plt.title('Distribution of Performance Score')

plt.subplot(2, 2, 4)
sns.histplot(df['Sick_Days'], kde=True)
plt.title('Distribution of Sick Days')
plt.tight_layout()
plt.show()


# Box plots for numerical features
plt.figure(figsize=(12, 6))
plt.subplot(1, 4, 1)
sns.boxplot(y=df['Age'])
plt.title('Box Plot of Age')

plt.subplot(1, 4, 2)
sns.boxplot(y=df['Salary'])
plt.title('Box Plot of Salary')

plt.subplot(1, 4, 3)
sns.boxplot(y=df['Performance_Score'])
plt.title('Box Plot of Performance Score')

plt.subplot(1, 4, 4)
sns.boxplot(y=df['Sick_Days'])
plt.title('Box Plot of Sick Days')
plt.tight_layout()
plt.show()


# Bar charts for categorical features
plt.figure(figsize=(15, 5))
plt.subplot(1, 3, 1)
sns.countplot(x='Department', data=df)
plt.title('Distribution of Employees Across Departments')
plt.xticks(rotation=45, ha='right')


plt.subplot(1, 3, 2)
sns.countplot(x='Gender', data=df)
plt.title('Distribution of Employees by Gender')

plt.subplot(1, 3, 3)
sns.countplot(x='Left_Company', data=df)
plt.title('Distribution of Employees who Left the Company')
plt.tight_layout()
plt.show()


# Heatmap for correlation between numerical features
plt.figure(figsize=(8, 6))
sns.heatmap(df[['Age', 'Salary', 'Performance_Score', 'Sick_Days']].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap of Numerical Features')
plt.show()

# Bar chart of employees who left the company across departments
left_by_department = df.groupby('Department')['Left_Company'].value_counts(normalize=True).unstack() * 100
left_by_department['Yes'].plot(kind='bar', figsize=(8, 6))
plt.title('Percentage of Employees who Left by Department')
plt.ylabel('Percentage')
plt.show()

"""## Summary:

### Q&A
There were no explicit questions asked in the task. However, the overall goal was to understand the provided dataset, which implicitly asks for descriptive statistics and key characteristics of the data.

### Data Analysis Key Findings
* The dataset contains information on 100 employees, with features including demographics (age, gender), job-related information (department, salary, performance score), and employment status (whether they left the company).
* The average age of employees is approximately 39.7 years, with an average salary of around \$50,727.  The average performance score is 3.89, and the average number of sick days is 7.66.
* The 'Department' column shows an almost even distribution across five departments: Finance, Sales, HR, Marketing, and IT.
* Gender distribution is equal, with 50% male and 50% female employees.
* 21% of employees left the company.  The proportion of employees who left appears to be highest in HR and Finance departments.
* Performance score exhibits a weak negative correlation with salary and age, suggesting that higher performers might have slightly lower salaries and be younger, but the correlations are weak.


### Insights or Next Steps
* Investigate the reasons behind the higher employee turnover in HR and Finance departments. Further analysis, possibly including feature engineering and predictive modeling, could reveal underlying factors.
* Explore the relationship between performance score and salary in more depth.  Visualizations and statistical tests could help determine the nature and significance of this relationship.

"""

!streamlit run app.py